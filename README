pacparser
=========

pacparser is a C library to parse PAC (proxy auto-config) files. PAC files
(implemented in JavaScript) are a proxy configuration method for web access.
Using them, browsers can be configured to use different proxy servers for
different URLs, source IP addresses, protocols etc. PAC files can also be used
for a highly available proxy setup as you can specify more than one proxy
server using them.

Needless to say, PAC files are now a widely accepted method for proxy
configuration management and almost all popular browsers support them.
The idea behind pacparser is to make it easy to add this PAC file parsing
capability to other programs. It comes as a shared C library with a clear API.
You can use it to make any C or python (using ctypes) program PAC scripts
intelligent. Some very useful targets could be popular web software like wget,
curl and python-urllib.

* Implementation
  --------------
pacparser makes use of Mozilla's JavaScript interpreter SpiderMonkey to parse
PAC files (which are nothing but javascripts). Apart from that, proxy
auto-config standard assumes availability of some functions which are not
part of standard JavaScript. pacparser uses Mozilla's PAC implementation to
define all these functions except couple of dns functions which are defined by
pacparser itself. As a result, pacparser is as close to standard as it gets :)

* Install
  -------
Please see 'INSTALL' in the root directory of the package.

* How to use it?
  --------------
As pacparser comes as a shared library (libpacparser.so on Unix-like systems
and pacparser.dll on windows), using it is as easy compiling your C programs
against it. Or, you can simply call it's methods from within your python
programs using ctyles module.

* Usage Examples
  --------------

Using it with python-ctypes:
---------------------------------------------------------------------
>>> from ctypes import *
>>> pp=CDLL('./libpacparser.so')
>>> pp.pacparser_init()
1
>>> pp.pacparser_parse_pac('examples/wpad.dat')
1
>>> pp.pacparser_find_proxy('http://www.google.com', 'www.google.com')
136307304
>>> string_at(136307304)
'PROXY proxy1.manugarg.com:3128; PROXY proxy2.manugarg.com:3128; DIRECT'
>>> pp.pacparser_cleanup()
>>>
---------------------------------------------------------------------

Using it in C:
---------------------------------------------------------------------
manugarg@hobbiton:~$ cat pactest.c
#include <stdio.h>

int pacparser_init();
int pacparser_parse_pac(char* pacfile);
char *pacparser_find_proxy(char *url, char *host);
void pacparser_cleanup();

int main(int argc, char* argv[])
{
  char *proxy;
  pacparser_init();
  pacparser_parse_pac(argv[1]);
  proxy = pacparser_find_proxy(argv[2], argv[3]);
  printf("%s\n", proxy);
  pacparser_cleanup();
}

manugarg@hobbiton:~$ gcc -o pactest pactest.c -lpacparser
manugarg@hobbiton:~$ ./pactest wpad.dat http://www.google.com www.google.com
PROXY proxy1.manugarg.com:3128; PROXY proxy2.manugarg.com:3128; DIRECT
---------------------------------------------------------------------

* Platforms
  ---------
pacparser has been tested to work on Linux and Win32 systems.

Author: Manu Garg <manugarg@gmail.com>
Copyright (C) 2007 Manu Garg.
