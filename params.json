{"name":"Pacparser","tagline":"A library to parse proxy auto-config (PAC) files","body":"## pacparser\r\n\r\npacparser is a library to parse proxy auto-config (PAC) files. Proxy\r\nauto-config files are a vastly used proxy configuration method these days. Web\r\nbrowsers can use a PAC file to determine which proxy server to use or whether\r\nto go direct for a given URL. PAC files are written in JavaScript and can be\r\nprogrammed to return different proxy methods (e.g. \"PROXY proxy1:port; DIRECT\")\r\ndepending upon URL, source IP address, protocol, time of the day etc. PAC files\r\nintroduce a lot of possibilities. Please look at the wikipedia entry for Proxy\r\nauto-config (http://en.wikipedia.org/wiki/Proxy_auto-config) for more\r\ninformation.\r\n\r\nNeedless to say, PAC files are now a widely accepted method for proxy\r\nconfiguration management and companies all over are using them in corporate\r\nenvironment. Almost all popular web browsers support PAC files. The idea behind\r\npacparser is to make it easy to add this PAC file parsing capability to any\r\nprogram (C and python supported right now). It comes as a shared C library and\r\na python module which can be used to make any C or python program PAC scripts\r\nintelligent. Some very useful targets could be popular web software like wget,\r\ncurl and python-urllib.\r\n\r\n### Implementation\r\npacparser makes use of Mozilla's JavaScript interpreter SpiderMonkey to parse\r\nPAC files (which are nothing but javascripts). Apart from that, proxy\r\nauto-config standard assumes availability of some functions which are not\r\npart of standard JavaScript. pacparser uses Mozilla's PAC implementation to\r\ndefine all these functions except couple of dns functions which are defined by\r\npacparser itself. As a result, pacparser is as close to standard as it gets :)\r\n\r\n### Install\r\nPlease see 'INSTALL' in the root directory of the package.\r\n\r\n### How to use it?\r\nPacparser comes as a shared library (libpacparser.so on Unix-like systems\r\nand pacparser.dll on windows) as well as a python module. Using it is as easy\r\ncompiling your C programs against it or importing pacparser module in your\r\npython programs.\r\n\r\n### Usage Examples\r\n\r\n#### Python:\r\n```python\r\n>>> import pacparser\r\n>>> pacparser.init()\r\n>>> pacparser.parse_pac('examples/wpad.dat')\r\n>>> pacparser.find_proxy('http://www.google.com', 'www.google.com')\r\n'DIRECT'\r\n>>> pacparser.setmyip(\"192.168.1.134\")\r\n>>> pacparser.find_proxy('http://www.google.com', 'www.google.com')\r\n'PROXY proxy1.manugarg.com:3128; PROXY proxy2.manugarg.com:3128; DIRECT'\r\n>>> pacparser.find_proxy('http://www2.manugarg.com', 'www2.manugarg.com')\r\n'DIRECT'\r\n>>> pacparser.cleanup()\r\n>>>\r\n```\r\n\r\n#### C\r\n```C\r\n#include <stdio.h>\r\n\r\nint pacparser_init();\r\nint pacparser_parse_pac(char* pacfile);\r\nchar *pacparser_find_proxy(char *url, char *host);\r\nvoid pacparser_cleanup();\r\n\r\nint main(int argc, char* argv[])\r\n{\r\n  char *proxy;\r\n  pacparser_init();\r\n  pacparser_parse_pac(argv[1]);\r\n  proxy = pacparser_find_proxy(argv[2], argv[3]);\r\n  printf(\"%s\\n\", proxy);\r\n  pacparser_cleanup();\r\n}\r\n```\r\n```\r\nmanugarg@hobbiton:~$ gcc -o pactest pactest.c -lpacparser\r\nmanugarg@hobbiton:~$ ./pactest wpad.dat http://www.google.com www.google.com\r\nPROXY proxy1.manugarg.com:3128; PROXY proxy2.manugarg.com:3128; DIRECT\r\n```\r\n\r\n#### Platforms\r\npacparser has been tested to work on Linux (all architectures supported by Debian), Mac OS X and Win32 systems.\r\n\r\nAuthor: Manu Garg <manugarg@gmail.com>  \r\nCopyright (C) 2007 Manu Garg.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}