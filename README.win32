Building pacparser on Windows:
-----------------------------
To build pacparser on Windows you'll have to install some helper utilities
first. For compiling and linking pacparser, you'll need MinGW (www.mingw.org)
tools which can produce native windows programs. Apart from that, pacparser
needs SpiderMonkey JavaScript interpreter to work. DLL for SpiderMonkey
JavaScript interpreter is bundled with Mozilla Firefox (js3250.dll), which makes
our job a little easier. But, to be able to compile against this DLL, we need
import library (yes, Windows is weird). Creating this import library is a two
step process involving creation of definition file from .dll file using dumpbin
utility that comes with masm32, and then creation of import library from that
definition file and .dll file using dlltool.


Detailed Instructions:
----------------------
Create a working directory somewhere on your system. This is where you'll
install your tools and compile pacparser. Following instructions assume that
working directory is C:\devel.

1.  First of all we need an unzip utility. 7-zip is a good one and it's open
    source too. Download and install 7-zip on your system:
    http://downloads.sourceforge.net/sourceforge/sevenzip/7z442.exe
    (You can use any other unzip/unarchiver utility, but you'll have to modify
    rest of the instructions for that.)

2.  Add 7-zip binaries to your system path (My Computer -> Properties ->
    Advanced -> Environment Variables).

Set up MingW tools:

3.  Download mingw packages -- gcc-core, mingw-runtime, w32api and binutils
    from mingw download page: http://www.mingw.org/download.shtml to your
    working directory. Direct links:

    http://downloads.sourceforge.net/mingw/gcc-core-3.4.5-20060117-1.tar.gz
    http://downloads.sourceforge.net/mingw/binutils-2.17.50-20060824-1.tar.gz
    http://downloads.sourceforge.net/mingw/mingw-runtime-3.13.tar.gz
    http://downloads.sourceforge.net/mingw/w32api-3.10.tar.gz

    However it's better to download latest packages from
    http://downloads.sourceforge.net/mingw.

4.  Extract all the files into your working directory. In a command prompt
    window, run:
    => cd c:\devel
    => 7z x *.gz -y
    => 7z x *.tar -y

5.  Next we need to get the dumpbin utility to create import library from
    js3250.dll that comes with Mozilla Firefox. dumpbin utility comes with
    MASM32 assembler (www.masm32.com). You can either download it from masm32
    webpage and add masm install directory to your path. Or, you can download
    minimal package from http://manugarg.googlepages.com/masm32-bin.zip to your
    working directory and extract all files:
    => cd c:\devel
    => 7z x masm32-bin.zip

6.  Get following packages from GnuWin32 project:
    http://gnuwin32.sourceforge.net/downlinks/libiconv-bin-zip.php
    http://gnuwin32.sourceforge.net/downlinks/libintl-bin-zip.php
    http://gnuwin32.sourceforge.net/downlinks/gawk-bin-zip.php
    and save them in your working directory. Unzip them:
    => cd c:\devel
    => 7z x gawk*.zip
    => 7z x libintl*.zip
    => 7z x libiconv*.zip

7.  Add your working directory's bin (C:\devel\bin) to your path.

======== Done setting up tools ==========

8.  Now download pacparser source code tarball from
    http://code.google.com/p/pacparser/downloads/list and save it in your
    working directory. Then extract it using 7z:
    => cd c:\devel
    => 7z x pacparser*.tar.gz
    => 7z x pacparser*.tar

9.  Compile pacparser:
    => cd c:\devel\pacparser
    => gcc -DXP_WIN -I spidermonkey\win32 -c pacparser.c

10. Copy js3250.dll and nspr4.dll from Mozilla Firefox's installation directory
    to working directory (Install firefox if you don't have it already).
    => cd c:\devel
    => copy "C:\Program Files\Mozilla Firefox\js3250.dll" .
    => copy "C:\Program Files\Mozilla Firefox\nspr4.dll" .

11. Create import library for js3250.

    a) Get the dump of exports from js3250.dll:
       => dumpbin /EXPORTS ./js3250.dll > js3250.dumpbin

    b) Create the def file:
       => echo EXPORTS > js3250.def
       => gawk "/[ ]+[0-9]+[ ]+[0-9A-F]+[ ]+[0-9A-F]+/ {print $4}" js3250.dumpbin >> js3250.def

    c) Create import libary (.lib file):
       => dlltool --def js3250.def --dllname js3250.dll --output-lib js3250.lib

12. Create pacparser dll and import library:
    => gcc -shared -o pacparser.dll -Wl,--ouput-def,pacparser.def -Wl,--out-implib,libpacparser.a pacparser/pacparser.o -L. -ljs3250 -Llib -lws2_32
    Generate import library, required to link in pacparser on Visual Studio.
    => lib /machine:i386 /def:pacparser.def

13. js3250.dll and nspr4.dll are needed by pacparser.dll at run time. Import
    library libpacparser.a is required to compile C programs against
    pacparser.dll. These four files - js3250.dll, nspr4.dll, pacparser.dll and
    libpacparser.a will make our distribution package for Windows. Copy all
    these files to dist directory.
    => cd c:\devel
    => mkdir dist
    => xcopy *.dll dist
    => xcopy libpacparser.a dist

Using pacparser on Windows:
--------------------------
* In C programs:

Make sure that you have 3 dlls - js3250.dll, nspr4.dll and pacparser.dll in the
sytem path somewhere (current directory would do just fine for testing purpose).
libpacparser.a is required only for compilation and can be in the same directory
as your program.
  Change to your program's directory:
  =>  cd c:\devel\pacparser\examples
  Copy required files (from installation or distribution directory):
  => xcopy c:\devel\dist\* .
  Compile your program:
  => gcc -o pactest pactest.c -L. -lpacparser
  Run your program:
  => pactest wpad.dat http://www.google.com www.google.com
  'PROXY proxy1.manugarg.com:3128; PROXY proxy2.manugarg.com:3128; DIRECT'

* In python programs:

You can use it with python programs in the same way as for Unix-like systems.
  If DLLs are not in system path, change to installation directory:
  => cd c:\devel\dist
  Run python interpreter:
  => C:\python25\python
  >>> from ctypes import *
  >>> pacparser=CDLL('pacparser')
  >>> pacparser.init_pac_parser()
  1
  >>> pacparser.parse_pac('examples/wpad.dat')
  1
  >>> pacparser.find_proxy_for_url('http://www.google.com', 'www.google.com')
  136307304
  >>> string_at(136307304)
  'PROXY proxy1.manugarg.com:3128; PROXY proxy2.manugarg.com:3128; DIRECT'
